{"id":"index.ts","dependencies":[{"name":"/home/pp-2/bhargav/Development/typeScript/JsonPractical/tsconfig.json","includedInParent":true,"mtime":1676693338538},{"name":"/home/pp-2/bhargav/Development/typeScript/JsonPractical/package.json","includedInParent":true,"mtime":1676693338538},{"name":"axios","loc":{"line":16,"column":40,"index":974},"parent":"/home/pp-2/bhargav/Development/typeScript/JsonPractical/index.ts","resolved":"/home/pp-2/bhargav/Development/typeScript/node_modules/axios/index.js"}],"generated":{"js":"\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n//First way to compare two json file\nvar axios_1 = __importDefault(require(\"axios\"));\nfunction main() {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var data1Object, data1, data2Object, data2, i, isFound, j;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return axios_1.default.get('http://localhost:3000/Data1');\n        case 2:\n          data1Object = _context.sent;\n          data1 = data1Object.data;\n          _context.next = 6;\n          return axios_1.default.get('http://localhost:4000/Data2');\n        case 6:\n          data2Object = _context.sent;\n          data2 = data2Object.data;\n          console.log(data1);\n          console.log(data2);\n          i = 0;\n        case 11:\n          if (!(i < data1.length)) {\n            _context.next = 25;\n            break;\n          }\n          isFound = false;\n          j = 0;\n        case 14:\n          if (!(j < data2.length)) {\n            _context.next = 21;\n            break;\n          }\n          if (!(data1[i].id === data2[j].id)) {\n            _context.next = 18;\n            break;\n          }\n          isFound = true;\n          return _context.abrupt(\"break\", 21);\n        case 18:\n          j++;\n          _context.next = 14;\n          break;\n        case 21:\n          if (isFound === false) {\n            console.log(data1[i]);\n          }\n        case 22:\n          i++;\n          _context.next = 11;\n          break;\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n}\nmain();\n// let fs = require('fs');\n// const data1 = JSON.parse(\n//   fs.readFileSync('./file1.json', { encoding: 'utf-8' })\n// );\n// const Data1Collection:Array<{id:number,name:string}> = data1.Data1;\n// const data2 = JSON.parse(\n//   fs.readFileSync('./file2.json', { encoding: 'utf-8' })\n// );\n// const Data2Collection:Array<{id:number,name:string}> = data2.Data2;\n// for (let i = 0; i < Data1Collection.length; i++) {\n//   let isFound:boolean = false;\n//   for (let j = 0; j < Data2Collection.length; j++) {\n//     if (Data1Collection[i].id === Data2Collection[j].id) {\n//       isFound = true;\n//       break;\n//     }\n//   }\n//   if (isFound === false) {\n//     console.log(Data1Collection[i]);\n//   }\n// }\n//Third way to compare two json file\n// const reader1 = fs.createReadStream('./file1.json', {\n//   encoding: 'utf-8',\n// });\n// reader1.on('data', function (chunk) {\n//   const data1 = JSON.parse(chunk.toString());\n//   const d1: Array<{ id: number; name: string }> = data1.Data1;\n//   const reader2 = fs.createReadStream('./file2.json', {\n//     encoding: 'utf-8',\n//   });\n//   reader2.on('data', function (chunk) {\n//     const data2 = JSON.parse(chunk.toString());\n//     const d2: Array<{ id: number; name: string }> = data2.Data2;\n//     // console.log(d1, d2);\n//     for (let i = 0; i < d1.length; i++) {\n//       let isFound: boolean = false;\n//       for (let j = 0; j < d2.length; j++) {\n//         if (d1[i].id === d2[j].id) {\n//           isFound = true;\n//           break;\n//         }\n//       }\n//       if (isFound === false) {\n//         console.log(d1[i]);\n//       }\n//     }\n//   });\n// });"},"sourceMaps":{"js":{"mappings":[{"source":"index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":40,"column":0}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":41,"column":0}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":41,"column":4}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":41,"column":11}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":41,"column":14}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":41,"column":29}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":41,"column":30}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":41,"column":37}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":41,"column":38}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":41,"column":45}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":41,"column":46}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":41,"column":47}},{"source":"index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":42,"column":0}},{"source":"index.ts","name":null,"original":{"line":4,"column":15},"generated":{"line":42,"column":9}},{"source":"index.ts","name":null,"original":{"line":4,"column":19},"generated":{"line":42,"column":13}},{"source":"index.ts","name":null,"original":{"line":4,"column":19},"generated":{"line":42,"column":16}},{"source":"index.ts","name":null,"original":{"line":5,"column":22},"generated":{"line":49,"column":10}},{"source":"index.ts","name":null,"original":{"line":5,"column":28},"generated":{"line":49,"column":17}},{"source":"index.ts","name":null,"original":{"line":5,"column":28},"generated":{"line":49,"column":24}},{"source":"index.ts","name":null,"original":{"line":5,"column":28},"generated":{"line":49,"column":25}},{"source":"index.ts","name":null,"original":{"line":5,"column":33},"generated":{"line":49,"column":32}},{"source":"index.ts","name":null,"original":{"line":5,"column":34},"generated":{"line":49,"column":33}},{"source":"index.ts","name":null,"original":{"line":5,"column":37},"generated":{"line":49,"column":36}},{"source":"index.ts","name":null,"original":{"line":5,"column":38},"generated":{"line":49,"column":37}},{"source":"index.ts","name":null,"original":{"line":5,"column":67},"generated":{"line":49,"column":66}},{"source":"index.ts","name":null,"original":{"line":5,"column":68},"generated":{"line":49,"column":67}},{"source":"index.ts","name":null,"original":{"line":5,"column":68},"generated":{"line":50,"column":8}},{"source":"index.ts","name":null,"original":{"line":5,"column":8},"generated":{"line":51,"column":10}},{"source":"index.ts","name":null,"original":{"line":5,"column":19},"generated":{"line":51,"column":21}},{"source":"index.ts","name":null,"original":{"line":6,"column":8},"generated":{"line":52,"column":10}},{"source":"index.ts","name":null,"original":{"line":6,"column":13},"generated":{"line":52,"column":15}},{"source":"index.ts","name":null,"original":{"line":6,"column":53},"generated":{"line":52,"column":18}},{"source":"index.ts","name":null,"original":{"line":6,"column":64},"generated":{"line":52,"column":29}},{"source":"index.ts","name":null,"original":{"line":6,"column":65},"generated":{"line":52,"column":30}},{"source":"index.ts","name":null,"original":{"line":6,"column":69},"generated":{"line":52,"column":34}},{"source":"index.ts","name":null,"original":{"line":6,"column":69},"generated":{"line":53,"column":10}},{"source":"index.ts","name":null,"original":{"line":7,"column":22},"generated":{"line":54,"column":10}},{"source":"index.ts","name":null,"original":{"line":7,"column":28},"generated":{"line":54,"column":17}},{"source":"index.ts","name":null,"original":{"line":7,"column":28},"generated":{"line":54,"column":24}},{"source":"index.ts","name":null,"original":{"line":7,"column":28},"generated":{"line":54,"column":25}},{"source":"index.ts","name":null,"original":{"line":7,"column":33},"generated":{"line":54,"column":32}},{"source":"index.ts","name":null,"original":{"line":7,"column":34},"generated":{"line":54,"column":33}},{"source":"index.ts","name":null,"original":{"line":7,"column":37},"generated":{"line":54,"column":36}},{"source":"index.ts","name":null,"original":{"line":7,"column":38},"generated":{"line":54,"column":37}},{"source":"index.ts","name":null,"original":{"line":7,"column":67},"generated":{"line":54,"column":66}},{"source":"index.ts","name":null,"original":{"line":7,"column":68},"generated":{"line":54,"column":67}},{"source":"index.ts","name":null,"original":{"line":7,"column":68},"generated":{"line":55,"column":8}},{"source":"index.ts","name":null,"original":{"line":7,"column":8},"generated":{"line":56,"column":10}},{"source":"index.ts","name":null,"original":{"line":7,"column":19},"generated":{"line":56,"column":21}},{"source":"index.ts","name":null,"original":{"line":8,"column":8},"generated":{"line":57,"column":10}},{"source":"index.ts","name":null,"original":{"line":8,"column":13},"generated":{"line":57,"column":15}},{"source":"index.ts","name":null,"original":{"line":8,"column":53},"generated":{"line":57,"column":18}},{"source":"index.ts","name":null,"original":{"line":8,"column":64},"generated":{"line":57,"column":29}},{"source":"index.ts","name":null,"original":{"line":8,"column":65},"generated":{"line":57,"column":30}},{"source":"index.ts","name":null,"original":{"line":8,"column":69},"generated":{"line":57,"column":34}},{"source":"index.ts","name":null,"original":{"line":9,"column":2},"generated":{"line":58,"column":10}},{"source":"index.ts","name":null,"original":{"line":9,"column":9},"generated":{"line":58,"column":17}},{"source":"index.ts","name":null,"original":{"line":9,"column":10},"generated":{"line":58,"column":18}},{"source":"index.ts","name":null,"original":{"line":9,"column":13},"generated":{"line":58,"column":21}},{"source":"index.ts","name":null,"original":{"line":9,"column":14},"generated":{"line":58,"column":22}},{"source":"index.ts","name":null,"original":{"line":9,"column":19},"generated":{"line":58,"column":27}},{"source":"index.ts","name":null,"original":{"line":9,"column":20},"generated":{"line":58,"column":28}},{"source":"index.ts","name":null,"original":{"line":10,"column":2},"generated":{"line":59,"column":10}},{"source":"index.ts","name":null,"original":{"line":10,"column":9},"generated":{"line":59,"column":17}},{"source":"index.ts","name":null,"original":{"line":10,"column":10},"generated":{"line":59,"column":18}},{"source":"index.ts","name":null,"original":{"line":10,"column":13},"generated":{"line":59,"column":21}},{"source":"index.ts","name":null,"original":{"line":10,"column":14},"generated":{"line":59,"column":22}},{"source":"index.ts","name":null,"original":{"line":10,"column":19},"generated":{"line":59,"column":27}},{"source":"index.ts","name":null,"original":{"line":10,"column":20},"generated":{"line":59,"column":28}},{"source":"index.ts","name":null,"original":{"line":11,"column":11},"generated":{"line":60,"column":10}},{"source":"index.ts","name":null,"original":{"line":11,"column":12},"generated":{"line":60,"column":11}},{"source":"index.ts","name":null,"original":{"line":11,"column":15},"generated":{"line":60,"column":14}},{"source":"index.ts","name":null,"original":{"line":11,"column":16},"generated":{"line":60,"column":15}},{"source":"index.ts","name":null,"original":{"line":11,"column":16},"generated":{"line":61,"column":8}},{"source":"index.ts","name":null,"original":{"line":11,"column":16},"generated":{"line":62,"column":10}},{"source":"index.ts","name":null,"original":{"line":11,"column":18},"generated":{"line":62,"column":16}},{"source":"index.ts","name":null,"original":{"line":11,"column":19},"generated":{"line":62,"column":17}},{"source":"index.ts","name":null,"original":{"line":11,"column":22},"generated":{"line":62,"column":20}},{"source":"index.ts","name":null,"original":{"line":11,"column":27},"generated":{"line":62,"column":25}},{"source":"index.ts","name":null,"original":{"line":11,"column":28},"generated":{"line":62,"column":26}},{"source":"index.ts","name":null,"original":{"line":11,"column":34},"generated":{"line":62,"column":32}},{"source":"index.ts","name":null,"original":{"line":11,"column":34},"generated":{"line":63,"column":12}},{"source":"index.ts","name":null,"original":{"line":11,"column":34},"generated":{"line":64,"column":12}},{"source":"index.ts","name":null,"original":{"line":11,"column":34},"generated":{"line":65,"column":10}},{"source":"index.ts","name":null,"original":{"line":12,"column":8},"generated":{"line":66,"column":10}},{"source":"index.ts","name":null,"original":{"line":12,"column":15},"generated":{"line":66,"column":17}},{"source":"index.ts","name":null,"original":{"line":12,"column":18},"generated":{"line":66,"column":20}},{"source":"index.ts","name":null,"original":{"line":12,"column":23},"generated":{"line":66,"column":25}},{"source":"index.ts","name":null,"original":{"line":13,"column":13},"generated":{"line":67,"column":10}},{"source":"index.ts","name":null,"original":{"line":13,"column":14},"generated":{"line":67,"column":11}},{"source":"index.ts","name":null,"original":{"line":13,"column":17},"generated":{"line":67,"column":14}},{"source":"index.ts","name":null,"original":{"line":13,"column":18},"generated":{"line":67,"column":15}},{"source":"index.ts","name":null,"original":{"line":13,"column":18},"generated":{"line":68,"column":8}},{"source":"index.ts","name":null,"original":{"line":13,"column":18},"generated":{"line":69,"column":10}},{"source":"index.ts","name":null,"original":{"line":13,"column":20},"generated":{"line":69,"column":16}},{"source":"index.ts","name":null,"original":{"line":13,"column":21},"generated":{"line":69,"column":17}},{"source":"index.ts","name":null,"original":{"line":13,"column":24},"generated":{"line":69,"column":20}},{"source":"index.ts","name":null,"original":{"line":13,"column":29},"generated":{"line":69,"column":25}},{"source":"index.ts","name":null,"original":{"line":13,"column":30},"generated":{"line":69,"column":26}},{"source":"index.ts","name":null,"original":{"line":13,"column":36},"generated":{"line":69,"column":32}},{"source":"index.ts","name":null,"original":{"line":13,"column":36},"generated":{"line":70,"column":12}},{"source":"index.ts","name":null,"original":{"line":13,"column":36},"generated":{"line":71,"column":12}},{"source":"index.ts","name":null,"original":{"line":13,"column":36},"generated":{"line":72,"column":10}},{"source":"index.ts","name":null,"original":{"line":13,"column":36},"generated":{"line":73,"column":10}},{"source":"index.ts","name":null,"original":{"line":14,"column":10},"generated":{"line":73,"column":16}},{"source":"index.ts","name":null,"original":{"line":14,"column":15},"generated":{"line":73,"column":21}},{"source":"index.ts","name":null,"original":{"line":14,"column":16},"generated":{"line":73,"column":22}},{"source":"index.ts","name":null,"original":{"line":14,"column":17},"generated":{"line":73,"column":23}},{"source":"index.ts","name":null,"original":{"line":14,"column":18},"generated":{"line":73,"column":24}},{"source":"index.ts","name":null,"original":{"line":14,"column":19},"generated":{"line":73,"column":25}},{"source":"index.ts","name":null,"original":{"line":14,"column":21},"generated":{"line":73,"column":27}},{"source":"index.ts","name":null,"original":{"line":14,"column":26},"generated":{"line":73,"column":32}},{"source":"index.ts","name":null,"original":{"line":14,"column":31},"generated":{"line":73,"column":37}},{"source":"index.ts","name":null,"original":{"line":14,"column":32},"generated":{"line":73,"column":38}},{"source":"index.ts","name":null,"original":{"line":14,"column":33},"generated":{"line":73,"column":39}},{"source":"index.ts","name":null,"original":{"line":14,"column":34},"generated":{"line":73,"column":40}},{"source":"index.ts","name":null,"original":{"line":14,"column":35},"generated":{"line":73,"column":41}},{"source":"index.ts","name":null,"original":{"line":14,"column":37},"generated":{"line":73,"column":43}},{"source":"index.ts","name":null,"original":{"line":14,"column":37},"generated":{"line":74,"column":12}},{"source":"index.ts","name":null,"original":{"line":14,"column":37},"generated":{"line":75,"column":12}},{"source":"index.ts","name":null,"original":{"line":14,"column":37},"generated":{"line":76,"column":10}},{"source":"index.ts","name":null,"original":{"line":15,"column":8},"generated":{"line":77,"column":10}},{"source":"index.ts","name":null,"original":{"line":15,"column":15},"generated":{"line":77,"column":17}},{"source":"index.ts","name":null,"original":{"line":15,"column":18},"generated":{"line":77,"column":20}},{"source":"index.ts","name":null,"original":{"line":15,"column":22},"generated":{"line":77,"column":24}},{"source":"index.ts","name":null,"original":{"line":15,"column":23},"generated":{"line":78,"column":10}},{"source":"index.ts","name":null,"original":{"line":15,"column":23},"generated":{"line":79,"column":8}},{"source":"index.ts","name":null,"original":{"line":13,"column":38},"generated":{"line":80,"column":10}},{"source":"index.ts","name":null,"original":{"line":13,"column":39},"generated":{"line":80,"column":11}},{"source":"index.ts","name":null,"original":{"line":13,"column":41},"generated":{"line":80,"column":13}},{"source":"index.ts","name":null,"original":{"line":13,"column":41},"generated":{"line":81,"column":10}},{"source":"index.ts","name":null,"original":{"line":13,"column":41},"generated":{"line":82,"column":10}},{"source":"index.ts","name":null,"original":{"line":13,"column":41},"generated":{"line":83,"column":8}},{"source":"index.ts","name":null,"original":{"line":19,"column":4},"generated":{"line":84,"column":10}},{"source":"index.ts","name":null,"original":{"line":19,"column":8},"generated":{"line":84,"column":14}},{"source":"index.ts","name":null,"original":{"line":19,"column":15},"generated":{"line":84,"column":21}},{"source":"index.ts","name":null,"original":{"line":19,"column":20},"generated":{"line":84,"column":26}},{"source":"index.ts","name":null,"original":{"line":19,"column":25},"generated":{"line":84,"column":31}},{"source":"index.ts","name":null,"original":{"line":19,"column":27},"generated":{"line":84,"column":33}},{"source":"index.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":85,"column":12}},{"source":"index.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":85,"column":19}},{"source":"index.ts","name":null,"original":{"line":20,"column":14},"generated":{"line":85,"column":20}},{"source":"index.ts","name":null,"original":{"line":20,"column":17},"generated":{"line":85,"column":23}},{"source":"index.ts","name":null,"original":{"line":20,"column":18},"generated":{"line":85,"column":24}},{"source":"index.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":85,"column":29}},{"source":"index.ts","name":null,"original":{"line":20,"column":24},"generated":{"line":85,"column":30}},{"source":"index.ts","name":null,"original":{"line":20,"column":25},"generated":{"line":85,"column":31}},{"source":"index.ts","name":null,"original":{"line":20,"column":26},"generated":{"line":85,"column":32}},{"source":"index.ts","name":null,"original":{"line":20,"column":27},"generated":{"line":85,"column":33}},{"source":"index.ts","name":null,"original":{"line":21,"column":5},"generated":{"line":87,"column":8}},{"source":"index.ts","name":null,"original":{"line":11,"column":36},"generated":{"line":88,"column":10}},{"source":"index.ts","name":null,"original":{"line":11,"column":37},"generated":{"line":88,"column":11}},{"source":"index.ts","name":null,"original":{"line":11,"column":39},"generated":{"line":88,"column":13}},{"source":"index.ts","name":null,"original":{"line":11,"column":39},"generated":{"line":89,"column":10}},{"source":"index.ts","name":null,"original":{"line":11,"column":39},"generated":{"line":90,"column":10}},{"source":"index.ts","name":null,"original":{"line":11,"column":39},"generated":{"line":91,"column":8}},{"source":"index.ts","name":null,"original":{"line":11,"column":39},"generated":{"line":92,"column":8}},{"source":"index.ts","name":null,"original":{"line":11,"column":39},"generated":{"line":93,"column":10}},{"source":"index.ts","name":null,"original":{"line":11,"column":39},"generated":{"line":94,"column":6}},{"source":"index.ts","name":null,"original":{"line":11,"column":39},"generated":{"line":95,"column":4}},{"source":"index.ts","name":null,"original":{"line":11,"column":39},"generated":{"line":96,"column":2}},{"source":"index.ts","name":null,"original":{"line":23,"column":1},"generated":{"line":96,"column":3}},{"source":"index.ts","name":null,"original":{"line":23,"column":1},"generated":{"line":96,"column":5}},{"source":"index.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":98,"column":0}},{"source":"index.ts","name":null,"original":{"line":25,"column":4},"generated":{"line":98,"column":4}},{"source":"index.ts","name":null,"original":{"line":25,"column":6},"generated":{"line":98,"column":6}},{"source":"index.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":99,"column":0}},{"source":"index.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":100,"column":0}},{"source":"index.ts","name":null,"original":{"line":31,"column":0},"generated":{"line":101,"column":0}},{"source":"index.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":102,"column":0}},{"source":"index.ts","name":null,"original":{"line":33,"column":0},"generated":{"line":103,"column":0}},{"source":"index.ts","name":null,"original":{"line":35,"column":0},"generated":{"line":104,"column":0}},{"source":"index.ts","name":null,"original":{"line":36,"column":0},"generated":{"line":105,"column":0}},{"source":"index.ts","name":null,"original":{"line":37,"column":0},"generated":{"line":106,"column":0}},{"source":"index.ts","name":null,"original":{"line":38,"column":0},"generated":{"line":107,"column":0}},{"source":"index.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":108,"column":0}},{"source":"index.ts","name":null,"original":{"line":41,"column":0},"generated":{"line":109,"column":0}},{"source":"index.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":110,"column":0}},{"source":"index.ts","name":null,"original":{"line":43,"column":0},"generated":{"line":111,"column":0}},{"source":"index.ts","name":null,"original":{"line":44,"column":0},"generated":{"line":112,"column":0}},{"source":"index.ts","name":null,"original":{"line":45,"column":0},"generated":{"line":113,"column":0}},{"source":"index.ts","name":null,"original":{"line":46,"column":0},"generated":{"line":114,"column":0}},{"source":"index.ts","name":null,"original":{"line":47,"column":0},"generated":{"line":115,"column":0}},{"source":"index.ts","name":null,"original":{"line":48,"column":0},"generated":{"line":116,"column":0}},{"source":"index.ts","name":null,"original":{"line":49,"column":0},"generated":{"line":117,"column":0}},{"source":"index.ts","name":null,"original":{"line":50,"column":0},"generated":{"line":118,"column":0}},{"source":"index.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":119,"column":0}},{"source":"index.ts","name":null,"original":{"line":53,"column":0},"generated":{"line":120,"column":0}},{"source":"index.ts","name":null,"original":{"line":54,"column":0},"generated":{"line":121,"column":0}},{"source":"index.ts","name":null,"original":{"line":55,"column":0},"generated":{"line":122,"column":0}},{"source":"index.ts","name":null,"original":{"line":56,"column":0},"generated":{"line":123,"column":0}},{"source":"index.ts","name":null,"original":{"line":58,"column":0},"generated":{"line":124,"column":0}},{"source":"index.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":125,"column":0}},{"source":"index.ts","name":null,"original":{"line":60,"column":0},"generated":{"line":126,"column":0}},{"source":"index.ts","name":null,"original":{"line":61,"column":0},"generated":{"line":127,"column":0}},{"source":"index.ts","name":null,"original":{"line":62,"column":0},"generated":{"line":128,"column":0}},{"source":"index.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":129,"column":0}},{"source":"index.ts","name":null,"original":{"line":64,"column":0},"generated":{"line":130,"column":0}},{"source":"index.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":131,"column":0}},{"source":"index.ts","name":null,"original":{"line":66,"column":0},"generated":{"line":132,"column":0}},{"source":"index.ts","name":null,"original":{"line":67,"column":0},"generated":{"line":133,"column":0}},{"source":"index.ts","name":null,"original":{"line":68,"column":0},"generated":{"line":134,"column":0}},{"source":"index.ts","name":null,"original":{"line":69,"column":0},"generated":{"line":135,"column":0}},{"source":"index.ts","name":null,"original":{"line":70,"column":0},"generated":{"line":136,"column":0}},{"source":"index.ts","name":null,"original":{"line":71,"column":0},"generated":{"line":137,"column":0}},{"source":"index.ts","name":null,"original":{"line":72,"column":0},"generated":{"line":138,"column":0}},{"source":"index.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":139,"column":0}},{"source":"index.ts","name":null,"original":{"line":74,"column":0},"generated":{"line":140,"column":0}},{"source":"index.ts","name":null,"original":{"line":75,"column":0},"generated":{"line":141,"column":0}},{"source":"index.ts","name":null,"original":{"line":76,"column":0},"generated":{"line":142,"column":0}},{"source":"index.ts","name":null,"original":{"line":77,"column":0},"generated":{"line":143,"column":0}},{"source":"index.ts","name":null,"original":{"line":78,"column":0},"generated":{"line":144,"column":0}},{"source":"index.ts","name":null,"original":{"line":79,"column":0},"generated":{"line":145,"column":0}},{"source":"index.ts","name":null,"original":{"line":80,"column":0},"generated":{"line":146,"column":0}},{"source":"index.ts","name":null,"original":{"line":81,"column":0},"generated":{"line":147,"column":0}}],"sources":{"index.ts":"//First way to compare two json file\nimport axios from 'axios';\n\nasync function main() {\n  const data1Object = await axios.get('http://localhost:3000/Data1');\n  const data1: Array<{ id: number; name: string }> = data1Object.data;\n  const data2Object = await axios.get('http://localhost:4000/Data2');\n  const data2: Array<{ id: number; name: string }> = data2Object.data;\n  console.log(data1);\n  console.log(data2);\n  for (let i = 0; i < data1.length; i++) {\n    let isFound = false;\n    for (let j = 0; j < data2.length; j++) {\n      if (data1[i].id === data2[j].id) {\n        isFound = true;\n        break;\n      }\n    }\n    if (isFound === false) {\n      console.log(data1[i]);\n    }\n  }\n}\n\nmain();\n//second way to compare two json file\nimport fs from 'fs';\n// let fs = require('fs');\n\n// const data1 = JSON.parse(\n//   fs.readFileSync('./file1.json', { encoding: 'utf-8' })\n// );\n// const Data1Collection:Array<{id:number,name:string}> = data1.Data1;\n\n// const data2 = JSON.parse(\n//   fs.readFileSync('./file2.json', { encoding: 'utf-8' })\n// );\n// const Data2Collection:Array<{id:number,name:string}> = data2.Data2;\n\n// for (let i = 0; i < Data1Collection.length; i++) {\n//   let isFound:boolean = false;\n//   for (let j = 0; j < Data2Collection.length; j++) {\n//     if (Data1Collection[i].id === Data2Collection[j].id) {\n//       isFound = true;\n//       break;\n//     }\n//   }\n//   if (isFound === false) {\n//     console.log(Data1Collection[i]);\n//   }\n// }\n\n//Third way to compare two json file\n// const reader1 = fs.createReadStream('./file1.json', {\n//   encoding: 'utf-8',\n// });\n\n// reader1.on('data', function (chunk) {\n//   const data1 = JSON.parse(chunk.toString());\n//   const d1: Array<{ id: number; name: string }> = data1.Data1;\n//   const reader2 = fs.createReadStream('./file2.json', {\n//     encoding: 'utf-8',\n//   });\n//   reader2.on('data', function (chunk) {\n//     const data2 = JSON.parse(chunk.toString());\n//     const d2: Array<{ id: number; name: string }> = data2.Data2;\n//     // console.log(d1, d2);\n//     for (let i = 0; i < d1.length; i++) {\n//       let isFound: boolean = false;\n//       for (let j = 0; j < d2.length; j++) {\n//         if (d1[i].id === d2[j].id) {\n//           isFound = true;\n//           break;\n//         }\n//       }\n//       if (isFound === false) {\n//         console.log(d1[i]);\n//       }\n//     }\n//   });\n// });\n"},"lineCount":null}},"error":null,"hash":"99cc04b8cc20131d93916a30985380c8","cacheData":{"env":{}}}